Quick overview
==============
Color usage tools
-----------------

When you import proplot:

* A bunch of new colormaps, property cyclers, color names, and fonts are registered and some default settings are changed.
* New tools for visualizing, creating, and modifying colormaps and property cyclers are registered.

If this is all you want and you don't care about the plotting features, simply
``import proplot`` at the top of your script. See :ref:`Color usage`, `~proplot.styletools.register_cmaps`, `~proplot.styletools.register_cycles`, `~proplot.styletools.register_colors`, and `~proplot.styletools.register_fonts` for details.

Top-level commands
------------------

ProPlot's features derive from the `~proplot.subplots.subplots` and `~proplot.subplots.figure` commands, inspired
by the pyplot `~matplotlib.pyplot.subplots` and `~matplotlib.pyplot.figure`
commands.
This creates a special `~proplot.subplots.Figure` subclass, whose `~proplot.subplots.Figure.add_subplot` method draws special `~proplot.axes.Axes` subclasses.
The features provided by `~proplot.subplots.subplots` and `~proplot.subplots.figure` are numerous; check out the documenation for details.

Figure and axes commands
------------------------
The new `~proplot.subplots.Figure` and `~proplot.axes.Axes` classes
override various matplotlib methods to implement tons of useful features.

The most important new method is `~proplot.axes.Axes.format`. This is available on every axes subclass generated by proplot -- `~proplot.axes.CartesianAxes`, `~proplot.axes.PolarAxes`, and `~proplot.axes.ProjectionAxes`. Use this method to fine-tune your axis properties, titles, labels, limits, arbitrary settings, and much much more. Think of this as an improved version of the `~matplotlib.artist.Artist` `~matplotlib.artist.Artist.update` method.

ProPlot introduces helpful `~proplot.axistools.Locator`, `~proplot.axistools.Formatter`, `~proplot.axistools.Scale`, `~proplot.projs.Proj`, `~proplot.styletools.Norm`, `~proplot.styletools.Colormap`, and `~proplot.styletools.Cycle` constructor functions. These are used to interpret keyword arguments supplied to `~proplot.axes.Axes.format`, `~proplot.figure.Figure.subplots`, and various plotting commands. This means more flexibility and less boilerplate code.

Additional features
-------------------

ProPlot implements a new `tight layout <https://matplotlib.org/3.1.1/tutorials/intermediate/tight_layout_guide.html>`__ algorithm and automatically applies it by default. The figure width and height are allowed to vary so that subplot aspect ratios remain fixed, which is particularly useful for grids of map projections and images. Arbitrary physical units, including *metric* units like ``cm`` and ``mm``, can be used for sizing arguments.

*  Axes panels and figure panels, generally used for colorbars and legends
   that refer to multiple subplots at once. New "inset" colorbars.
   Colorbars from lists of lines or colors. Legends with centered
   rows instead of aligned columns.
*  Automatic axes, colorbar, and legend formatting when
   ``xarray.DataArray``, ``pandas.DataFrame``, or ``pandas.Series`` objects are passed
   to a plotting command, just like their respective ``plot`` methods.
*  Beautiful new colormaps, named "color cycles", and easy-to-remember
   color names. Tools for merging colormaps and making new "perceptually
   uniform" colormaps on-the-fly. Tools for slicing and modifying existing
   colormaps.
*  Global setting customization with a user ``.proplotrc`` file. Save custom
   colormaps, color cycles, and fonts in a user ``.proplot`` folder, and they
   will be loaded every time on startup.

Cartopy and basemap intergration
--------------------------------
Generate arbitrary grids of arbitrary map projections in one go. Switch between the cartopy and basemap backends painlessly. Simplified plotting commands.  Add geographic features and custom meridian and parallel gridlines and labels with the `~proplot.ProjectionAxes.format` command.
