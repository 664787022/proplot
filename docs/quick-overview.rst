==============
Quick overview
==============

Importing proplot
=================

We recommend importing ProPlot with

.. code-block:: python

   import proplot as plot

This differentiates ProPlot from the usual ``plt`` abbreviation used for the `~matplotlib.pyplot` module.

Importing proplot immediately adds a bunch of new colormaps, property cyclers, color names, and fonts to matplotlib and changes some default settings.
If this is all you want and you don't care about the plotting features, simply
``import proplot`` at the top of your script. See :ref:`Colormaps`, :ref:`Color cycles`, :ref:`Colors and fonts`, `~proplot.styletools.register_cmaps`, `~proplot.styletools.register_cycles`, `~proplot.styletools.register_colors`, and `~proplot.styletools.register_fonts` for details.

Top-level commands
==================

ProPlot's features derive from the `~proplot.subplots.subplots` command, inspired
by the pyplot `~matplotlib.pyplot.subplots` command.
`~proplot.subplots.subplots` creates a `~proplot.subplots.Figure` subclass
populated with special `~proplot.axes.Axes` subclasses,
and is packed with new features -- one highlight is the new :ref:`Tight layout`
algorithm applied to all `~proplot.subplots.Figure`\ s by default.

Figure and axes commands
========================
The new `~proplot.subplots.Figure` and `~proplot.axes.Axes` classes
override various matplotlib methods to implement tons of useful features.

The most important new method is `~proplot.axes.Axes.format`. This is available on every axes subclass generated by proplot -- `~proplot.axes.XYAxes`, `~proplot.axes.PolarAxes`, and `~proplot.axes.ProjAxes`. Use this method to fine-tune your axis properties, titles, labels, limits, arbitrary settings, and much much more. Think of this as an improved version of the `~matplotlib.artist.Artist` `~matplotlib.artist.Artist.update` method.

Edge stacks
===========
Proplot adds new `~proplot.axes.Axes` `~proplot.axes.Axes.colorbar` and `~proplot.axes.Axes.legend` commands and `~proplot.subplots.Figure` `~proplot.subplots.Figure.colorbar` and `~proplot.subplots.Figure.legend` commands that make adding colorbars and legends to the *outside* of axes simple.

The `~proplot.subplots.Figure` methods align objects with respect to the subplot grid, rather than the figure bounds. You can also make inset colorbars, make colorbars from lists of lines or colors, and make legends with centered rows instead of aligned columns.

Integration with other packages
===============================
ProPlot includes integration with `xarray`, `pandas`, `cartopy`, and `~mpl_toolkits.basemap`:

* Axis labels, tick labels, titles, colorbar labels, and legend labels are automatically applied when you pass an `xarray.DataArray`, `pandas.DataFrame`, or `pandas.Series` object to any plotting command. This works just like the native `xarray.DataArray.plot` and `pandas.DataFrame.plot` methods.
* The `~proplot.projs.Proj` function lets you make arbitrary grids of map projections. It is used to interpret the `proj` keyword arg passed to `~proplot.subplots.Figure.subplots`. The resulting axes are instances of `~proplot.axes.ProjAxes` with `~proplot.axes.ProjAxes.format` methods that can be used to add geographic features and custom meridian and parallel gridlines.

Additional tools
================
ProPlot includes a bunch of additional tools outside
of the `~proplot.subplots.Figure` and `~proplot.axes.Axes` subclasses:

* The `~proplot.styletools.Colormap` and `~proplot.styletools.Cycle` constructor functions. These can slice, merge, and modify colormaps and color cycles.
* The `~proplot.styletools.LinearSegmentedColormap` and  `~proplot.styletools.ListedColormap` subclasses. These are used to wrap the default matplotlib colormaps.
* The new `~proplot.styletools.PerceptuallyUniformColormap` class, used for creating arbitrary colormaps with perceptually uniform transitions.
* The `~proplot.rctools.rc` object, an instance of `~proplot.rctools.rc_configurator`, for modifying global settings. You can also control settings with a ``~/.proplotrc`` file. See :ref:`Configuring proplot` for details.
* The `~proplot.axistools.Locator`, `~proplot.axistools.Formatter`, and `~proplot.axistools.Scale` constructor functions, used to generate class instances from variable input types. These are used to interpret keyword arguments passed to `~proplot.axes.Axes.format` and `~proplot.subplots.Figure.colorbar`.
* The `~proplot.projs.Proj` constructor function, used to generate basemap `~mpl_toolkits.basemap.Basemap` and cartopy `~cartopy.crs.Projection` instances from shorthand projection names.
* The `~proplot.styletools.Norm` constructor function, used to generated colormap normalizers from shorthand names; the `~proplot.styletools.LinearSegmentedNorm` normalizer, used to scale colors evenly w.r.t. index for arbitrarily spaced monotonic levels; and the `~proplot.styletools.BinNorm` meta-normalizer, used to discretized colormap colors.

