==============
Quick overview
==============

ProPlot is an object-oriented matplotlib wrapper for making beautiful, publication-quality graphics. Most of its features derive from subclasses of the `~matplotlib.figure.Figure` and `~matplotlib.axes.Axes` classes.

This page is meant as the starting point for new users. It is
populated with links to the :ref:`API reference` and User Guide.
For more in-depth descriptions, see :ref:`Why ProPlot?`.

Importing proplot
=================

We recommend importing ProPlot with

.. code-block:: python

   import proplot as plot

This differentiates ProPlot from the usual ``plt`` abbreviation used for the `~matplotlib.pyplot` module.

Importing proplot immediately adds a bunch of new colormaps, property cyclers, color names, and fonts to matplotlib and changes some default settings.
If this is all you want and you don't care about the plotting features, simply
``import proplot`` at the top of your script. See :ref:`Colormaps`, :ref:`Color cycles`, and :ref:`Colors and fonts` for details.

Top-level commands
==================

ProPlot's features derive from the `~proplot.subplots.subplots` command, inspired
by the pyplot `~matplotlib.pyplot.subplots` command.

The `~proplot.subplots.subplots` command creates a `~proplot.subplots.Figure` subclass
populated with special `~proplot.axes.Axes` subclasses,
and is packed with new features -- one highlight is the new :ref:`Figure tight layout`
algorithm applied to all `~proplot.subplots.Figure`\ s by default.
See :ref:`Creating figures` for details.

Figure and axes methods
=======================
The new `~proplot.subplots.Figure` and `~proplot.axes.Axes` classes
override various matplotlib methods to implement tons of useful features.

The most important new method is `~proplot.axes.Axes.format`. This is available on every axes subclass generated by proplot -- `~proplot.axes.XYAxes`, `~proplot.axes.PolarAxes`, and `~proplot.axes.ProjAxes`. Use this method to fine-tune your axis properties, titles, labels, limits, arbitrary settings, and much much more.
See :ref:`Customizing figures` for details.

Proplot adds new `~proplot.axes.Axes` `~proplot.axes.Axes.colorbar` and `~proplot.axes.Axes.legend` commands and `~proplot.subplots.Figure` `~proplot.subplots.Figure.colorbar` and `~proplot.subplots.Figure.legend` commands that make adding colorbars and legends to the *outside* of axes simple. See :ref:`Colorbars and legends` for details.

ProPlot also wraps several plotting methods on the `~proplot.axes.Axes` class.
See :ref:`1d plotting` and :ref:`2d plotting` for details.

Integration with other packages
===============================
ProPlot includes integration with `xarray`, `pandas`, `cartopy`, and `~mpl_toolkits.basemap`:

* Axis labels, tick labels, titles, colorbar labels, and legend labels are automatically applied when you pass an `xarray.DataArray`, `pandas.DataFrame`, or `pandas.Series` object to any plotting command. This works just like the native `xarray.DataArray.plot` and `pandas.DataFrame.plot` methods. See :ref:`1d plotting` and :ref:`2d plotting` for details.
* The `~proplot.projs.Proj` function lets you make arbitrary grids of basemap `~mpl_toolkits.basemap.Basemap` and cartopy `~cartopy.crs.Projection` projections. It is used to interpret the `proj` keyword arg passed to `~proplot.subplots.subplots`. The resulting axes are instances of `~proplot.axes.ProjAxes` with `~proplot.axes.ProjAxes.format` methods that can be used to add geographic features and custom meridian and parallel gridlines. See :ref:`Geographic and polar plots` for details.

Additional tools
================
ProPlot includes a bunch of additional tools outside
of the `~proplot.subplots.Figure` and `~proplot.axes.Axes` subclasses:

* The `~proplot.styletools.Colormap` and `~proplot.styletools.Cycle` constructor functions. These can slice, merge, and modify colormaps and color cycles. See :ref:`Colormaps`, :ref:`Color cycles`, and :ref:`Colors and fonts` for details.
* The `~proplot.styletools.LinearSegmentedColormap` and  `~proplot.styletools.ListedColormap` subclasses, used to wrap the default matplotlib colormaps, and the new `~proplot.styletools.PerceptuallyUniformColormap` class, used for creating arbitrary colormaps with perceptually uniform transitions. See :ref:`Colormaps` for details.
* The `~proplot.styletools.Norm` constructor function, used to generated colormap normalizers from shorthand names; the `~proplot.styletools.LinearSegmentedNorm` normalizer, used to scale colors evenly w.r.t. index for arbitrarily spaced monotonic levels; and the `~proplot.styletools.BinNorm` meta-normalizer, used to discretized colormap colors. See :ref:`2d plotting` for details.
* The `~proplot.axistools.Locator`, `~proplot.axistools.Formatter`, and `~proplot.axistools.Scale` constructor functions, used to generate class instances from variable input types. These are used to interpret keyword arguments passed to `~proplot.axes.Axes.format` and `~proplot.subplots.Figure.colorbar`. See :ref:`X and Y axis settings` for details.
* The `~proplot.rctools.rc` object, an instance of `~proplot.rctools.rc_configurator`, for modifying global settings. You can also control settings with a ``~/.proplotrc`` file. See :ref:`Configuring proplot` for details.

