.. Docstrings formatted according to:
   numpy guide:      https://numpydoc.readthedocs.io/en/latest/format.html
   matplotlib guide: https://matplotlib.org/devel/documenting_mpl.html
.. Sphinx is used following this guide (less traditional approach):
   https://daler.github.io/sphinxdoc-test/includeme.html

ProPlot
=======

An `object-oriented <https://matplotlib.org/api/api_overview.html>`__ `matplotlib <https://matplotlib.org/>`__ wrapper
that can help you make beautiful, publication-quality graphics.

Installation
------------

This package is a work-in-progress. Currently there is no formal release
on PyPi (coming soon!). However, feel free to install directly from Github using:

::

   pip install git+https://github.com/lukelbd/proplot.git#egg=proplot

The dependencies are `matplotlib <https://matplotlib.org/>`_ and `numpy <http://www.numpy.org/>`_.  The optional geographic mapping features require `cartopy <https://scitools.org.uk/cartopy/docs/latest/>`_ and/or `basemap <https://matplotlib.org/basemap/index.html>`_.

Importing
---------
I recommend importing with

.. code-block:: python

   import proplot as plot

to differentiate ProPlot from the usual "``plt``" abbreviation used for the ``pyplot`` module.

Documentation
-------------
The documentation is published `here <https://lukelbd.github.io/proplot>`_.

Overview
--------

Importing ProPlot registers a bunch of new colormaps and color names.
If this is all you want and you don't care about other features, simply
import ProPlot at the top of your script. See the documentation for details.

Most of ProPlot's features derive from the ``subplots`` command, inspired
by the pyplot command of the same name.
This generates a scaffolding of specially subclassed axes, and has a bunch of other useful features.

The next most important utility is the ``format`` method, available on every axes generated by ``subplots``. Use this method to fine-tune your axis properties, titles, labels, limits, and much more.

Here are some highlights of the remaining features:

*  A smarter "tight layout" feature. Figure width or height alternately
   scales so that subplot **aspect ratios** are fixed, inner space
   between subplots automatically scaled so subplot tick labels, etc. do
   not overlap with each other.
*  Axes panels and figure panels, for global colorbars, global legends,
   or tertiary data. Panel widths always held fixed during "tight layout"
   scaling.
*  Automatic axes formatting when ``xarray.DataArray`` or ``pandas.DataFrame`` objects
   or ``pandas.Series`` are passed to a plotting command, just like 
   ``xarray.DataArray.plot`` and ``DataFrame.plot``.
*  Specify figure, axes, panel, etc. sizes with arbitrary physical units --
   not just inches or "relative" units.
*  Easy setting customization with a user ``.proplotrc`` file. Option
   to save custom colormaps, and they will be loaded every time on startup.
*  Perceptually distinct named colors with easy-to-remember names,
   a ton of beautiful new colormaps, new property cycle colors.
*  Tools for merging existing colormaps and making new "perceptually
   uniform" colormaps on-the-fly. Tools for slicing and modifying existing
   colormaps.
*  Making colorbars from lists of lines
   or colors. Making axes "inset" colorbars. Making legends with centered
   rows instead of aligned columns.
*  Integration with basemap and cartopy. Generate arbitrary
   grids of arbitrary map projections in one go. Switch between the cartopy and
   basemap backends painlessly. Use the axes methods directly for basemap
   plotting, instead of the ``Basemap`` object.
*  Add geographic features with the ``format`` command.
   Customize geographic gridlines and gridline labels.

Why not add to matplotlib directly?
-----------------------------------
.. This project introduces new frameworks for
.. working with figures, namely *static* figure scaffoldings, the
.. wonky (but very useful) ``axes_list`` class,
.. harmonized usage of physical units across the entire project
This project can be thought of as "matplotlib for power users."
Many of its features represent an "alternative" to the existing matplotlib API -- and
following `TOOWTDI <https://wiki.python.org/moin/TOOWTDI>`__ philosophy,
they probably should remain here as a side project.
And while some of its features represent an enhancement to matplotlib,
they can be relatively esoteric for normal users (for example,
"perceptually uniform" colormaps), or 
can be seen as "convenience features" that perhaps do not belong
with the core API for the sake of minimalism (for example, direct integration
with cartographic toolkits and "dual" axes).

There are also some philosophical differences and more direct conflicts.
ProPlot imposes a strict framework for working with figures, with "static"
figure scaffoldings and new ``format`` and ``smart_update`` methods
meant to replace more verbose calls to various individual axes and axis methods.
Meanwhile the "smart tight layout" feature also conflicts directly with
matplotlib's `tight layout <https://matplotlib.org/tutorials/intermediate/tight_layout_guide.html>`__, with more options and the ability
to preserve axes aspect ratios by sacrificing fixed figure dimensions,
while functionality offered by the ``subplots`` command may be seen as an alternative to
the `axes_grid1 <https://matplotlib.org/mpl_toolkits/axes_grid1/index.html>`__ toolkit.
Further, by deleting several native matplotlib colormaps,
this project represents a backwards incompatible break with matplotlib...
but IMHO no one should be using these colormaps anyway ;)

Nevertheless, if there are any matplotlib developers out there that think
some of these features should be added to matplotlib directly, please contact me!
And feel free to copy my code.

What about seaborn?
-------------------

There is already a great matplotlib wrapper called
`seaborn <https://seaborn.pydata.org/>`__. What makes this project
different?

While parts of ProPlot were inspired by Seaborn (e.g. some
of ``colors.py`` is drawn from ``palettes.py``), the goals
seem to be very different.
Seaborn largely attempts to merge the tasks of data analysis and
visualization, and seems to be geared toward statisticians, data scientists,
and the private sector
rather than physical scientists, academia, and the public sector.
ProPlot is geared toward the latter group and is intended to help you make
publication-quality figures, period.
It contains no data analysis tools â€“ it is expected
that you perform data analysis with other tools, or
use the built-in tools offered by ``pandas`` and ``xarray``
when you do need quick, on-the-fly plots.

Further, most of Seaborn's features are also only accessible from commands
on the module itself.
ProPlot is integrated much more closely with the matplotlib API,
relying on special subclasses of the native matplotlib ``Figure`` and ``Axes``
classes and the native matplotlib ``Colormap`` classes as opposed
to "palettes". This gives new users a very gentle learning curve, while
permitting the development of a number of powerful features well beyond
the scope of Seaborn.

In summary, this project is meant as a companion or alternative to Seaborn
to serve the needs of a mostly distinct audience -- especially
frustrated grad students like me.

Contributions
-------------
This entire package has so far been written by just `me <https://github.com/lukelbd>`__ -- but I have a day job as a graduate student. If you have any ideas for new features or come across any bugs, I'd love to receive a pull request!

Shout out to `bradyrx <https://github.com/bradyrx>`__ for being the
guinea pig and helping me fix a lot of the initial bugs. If your field is
atmospheric science, check out his awesome
`decadal climate prediction package <https://github.com/bradyrx/climpred>`_.

Donations
---------

At well over 10,000 lines of code, this package took a huge amount of time to write and document. If ProPlot has been useful for you, consider sending me a small donation.

.. image:: https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif
   :target: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5SP6S8RZCYMQA&source=url
