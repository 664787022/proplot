.. Docstrings formatted according to:
   numpy guide:      https://numpydoc.readthedocs.io/en/latest/format.html
   matplotlib guide: https://matplotlib.org/devel/documenting_mpl.html
.. Sphinx is used following this guide (less traditional approach):
   https://daler.github.io/sphinxdoc-test/includeme.html

ProPlot
=======

An `object-oriented <https://matplotlib.org/api/api_overview.html>`__ `matplotlib <https://matplotlib.org/>`__ wrapper
that can help you make beautiful, publication-quality graphics.

Installation
------------

This package is a work-in-progress. Currently there is no formal release
on PyPi (coming soon!). However, feel free to install directly from Github using:

::

   pip install git+https://github.com/lukelbd/proplot.git#egg=proplot

The dependencies are `matplotlib <https://matplotlib.org/>`_ and `numpy <http://www.numpy.org/>`_.  The optional geographic mapping features require `cartopy <https://scitools.org.uk/cartopy/docs/latest/>`_ and/or `basemap <https://matplotlib.org/basemap/index.html>`_.

Documentation
-------------
The documentation is published `here <https://lukelbd.github.io/proplot>`_.

Overview
--------

Import with

::

   import proplot as plot

Most of the features derive from the ``subplots`` command, inspired
by the pyplot command of the same name.

The next most important utility is the ``format`` method, available on every axes generated by ``subplots``. Use this method to fine-tune your axis properties, titles, labels, limits, and much more.

Here are some highlights of the remaining features:

*  A smarter "tight layout" feature. Figure width or height alternately
   scales so that subplot **aspect ratios** are fixed, inner space
   between subplots automatically scaled so subplot tick labels, etc. do
   not overlap with each other.
*  Easy setting customization with a user ``.proplotrc`` file. Option
   to save custom colormaps, and they will be loaded every time on startup.
*  Axes panels and figure panels, for global colorbars, global legends,
   or tertiary data. Panel widths always held fixed during "tight layout"
   scaling.
*  Perceptually distinct named colors with easy-to-remember names,
   a ton of beautiful new colormaps, new property cycle colors.
*  Tools for merging existing colormaps and making new "perceptually
   uniform" colormaps on-the-fly. Tools for slicing and modifying existing
   colormaps.
*  Making colorbars from lists of lines
   or colors. Making axes "inset" colorbars. Making legends with centered
   rows instead of aligned columns.
*  Integration with basemap and cartopy. Generate arbitrary
   grids of arbitrary map projections in one go. Switch between the cartopy and
   basemap backends painlessly. Use the axes methods directly for basemap
   plotting, instead of the ``Basemap`` object.
*  Add geographic features with the ``format`` command.
   Customize geographic gridlines and gridline labels.

What about seaborn?
-------------------

There is already a great matplotlib wrapper called
`seaborn <https://seaborn.pydata.org/>`__. What makes this project
different?

While parts of ProPlot were inspired by seaborn (in particular much
of ``colors.py`` is drawn from seaborn’s ``palettes.py``), the goal for
this project was likely very different: It is intended to help you make
publication-quality figures, and no more.
Seaborn largely attempts to merge the tasks of data analysis and
visualization. ProPlot contains no analysis tools – it is expected
that you analyze data on your own, prior to plotting it. Anyway, both ``pandas``
and ``xarray`` already have great built-in tools for visualizing
tabulated and geophysical data -- and if ProPlot is imported, these tools will even work with its new
colormaps.
This narrow focus also allowed me
to integrate my features very closely with the matplotlib API (usually
as enhancements of existing ``Axes`` and
``Figure`` methods),
while ``seaborn`` features are only accessible from commands on the module
itself.

In summary, this is a package tightly integrated with `matplotlib` with a gentle learning curve,
for academics and others that need compact, fine-tuned figures for use in professional settings. As such, it provides a number of powerful, easy-to-use features well beyond the scope of `seaborn`.

Contributions
-------------
This entire package has so far been written by just `me <https://github.com/lukelbd>`__ -- but I have a day job as a graduate student. If you have any ideas for new features or come across any bugs, I'd love to receive a pull request! You shouldn't have much trouble modifying it -- the comments and documentation are fairly comprehensive.

Shout out to `bradyrx <https://github.com/bradyrx>`__ for being the
guinea pig and helping me fix a lot of the initial bugs. If your field is
atmospheric science, check out his awesome
`decadal climate prediction package <https://github.com/bradyrx/climpred>`_.

Donations
---------

At well over 10,000 lines of code, this package took a huge amount of time to write and document. If ProPlot has been useful for you, consider sending me a small donation.

.. image:: https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif
   :target: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5SP6S8RZCYMQA&source=url
