.. Documentation was generated following this guide:
   https://daler.github.io/sphinxdoc-test/includeme.html
   Relevant thread: https://github.com/sphinx-doc/sphinx/issues/3382
   More traditional approach: http://www.willmcginnis.com/2016/02/29/automating-documentation-workflow-with-sphinx-and-github-pages/

ProPlot
=======

A library providing helpful and versatile plotting utilities
for making beautiful, publication-quality graphics with ease.

Overview
--------

Import with

::

   import proplot as plot

Most of the features derive from the ``subplots`` command, inspired
by the ``pyplot`` command of the same name. This generates a scaffolding
of axes and panels, which may have shared axes and spanning axis labels.

The next most important utility is the ``format`` method, available
on every axes generated by ``subplots``. Use this method to fine-tune
your axis properties, titles, labels, limits, and much more.

Quick overview of additional features:

-  Geometry: A smarter "tight subplots" method. Panels and empty spaces
   are held *fixed*, while the figure and axes dimensions are allowed to
   change. This acheives a "tight border" without messing up axes aspect
   ratios or spaces.
-  Colors: Perceptually distinct named colors, powerful
   colormap-generating tools, ability to trivially swap between "color
   cycles" and "colormaps". A few new, beautiful colormaps and color
   cycles. Make colorbars from lists of lines or colors.
-  Maps: Integration with basemap *and* cartopy. Generate arbitrary
   grids of map projections in one go. Switch between basemap and
   cartopy painlessly. Add geographical features as part of the
   ``format`` process.

Shout out to `bradyrx <https://github.com/bradyrx>`__ for being the
guinea pig for this package and helping me fix a lot of the initial
bugs.

Showcase
--------

For a showcase of all ProPlot features, check out `this online jupyter
notebook <https://lukelbd.github.io/tools/proplot>`__.

Documentation
-------------

The full documentation can be found
`here <https://lukelbd.github.io/tools/proplot/doc>`__. It is a
work-in-progress.

Installation
------------

This package is a work-in-progress. Currently there is no formal release
on PyPi. However, feel free to install directly from Github using:

::

   pip install git+https://github.com/lukelbd/proplot.git#egg=proplot

Dependencies are ``matplotlib`` and ``numpy``. The geographic mapping
mapping features require ``basemap`` or ``cartopy``. Note that `basemap
is no longer under active
development <https://matplotlib.org/basemap/users/intro.html#cartopy-new-management-and-eol-announcement>`__
– cartopy is integrated more intelligently with the matplotlib API.
However, for the time being, basemap *retains several advantages* over
cartopy (namely `more tools for labeling
meridians/parallels <https://github.com/SciTools/cartopy/issues/881>`__
and more available projections – see
`basemap <https://matplotlib.org/basemap/users/mapsetup.html>`__ vs.
`cartopy <https://scitools.org.uk/cartopy/docs/v0.15/crs/projections.html>`__).
Therefore, I decided to support both.

How is this different from seaborn?
-----------------------------------

There is already a great matplotlib wrapper called
`seaborn <https://seaborn.pydata.org/>`__. What makes this project
different?

While parts of ``proplot`` were inspired by seaborn (in particular much
of ``colors.py`` is drawn from seaborn’s ``palettes.py``), the goal for
this project was quite different – it is intended to simplify the task
of making publication-quality figures, and no more.

Seaborn largely attempts to merge the tasks of data analysis and
visualization, and many of its features require neatly tabulated data in
a standard form. ProPlot contains no analysis tools – it is expected
that you analyze your data on your own time.

Anyway, as an atmospheric scientist, the datasets I use usually do not
lend themselves to fitting in a simple DataFrame – so this seaborn
feature was not particularly useful for me. For data analysis tools I
use in my physical climatology research, check out my
`ClimPy <https://github.com/lukelbd/climpy%60>`__ project (still in
preliminary stages).

By focusing on this single task, I was able to create a number of
powerful features beyond the scope of ``seaborn``. See the documentation
and showcase for details.

Donations
---------

This package took a shocking amount of time to write. If you’ve found it
useful, feel free to buy me a cup of coffee :)

.. image:: https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif
   :target: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5SP6S8RZCYMQA&source=url
   :scale: 50 %
