.. Docstrings formatted according to:
   numpy guide:      https://numpydoc.readthedocs.io/en/latest/format.html
   matplotlib guide: https://matplotlib.org/devel/documenting_mpl.html
.. Sphinx is used following this guide (less traditional approach):
   https://daler.github.io/sphinxdoc-test/includeme.html

ProPlot
=======

An `object-oriented <https://matplotlib.org/api/api_overview.html>`__ `matplotlib <https://matplotlib.org/>`__ wrapper
that can help you make beautiful, publication-quality graphics.

Installation
------------

This package is a work-in-progress. Currently there is no formal release
on PyPi (coming soon!). However, feel free to install directly from Github using:

::

   pip install git+https://github.com/lukelbd/proplot.git#egg=proplot

The dependencies are `matplotlib <https://matplotlib.org/>`_ and `numpy <http://www.numpy.org/>`_.  The optional geographic mapping features require `cartopy <https://scitools.org.uk/cartopy/docs/latest/>`_ and/or `basemap <https://matplotlib.org/basemap/index.html>`_.

Importing
---------
I recommend importing with

.. code-block:: python

   import proplot as plot

to differentiate ProPlot from the usual "``plt``" abbreviation used for the ``pyplot`` module.

Documentation
-------------
The documentation is published `here <https://lukelbd.github.io/proplot>`_.

Overview
--------

Importing ProPlot registers a bunch of new colormaps and color names.
If this is all you want and you don't care about other features, simply
import ProPlot at the top of your script. See the documentation for details.

Most of ProPlot's features derive from the ``subplots`` command, inspired
by the pyplot command of the same name.
This generates a scaffolding of specially subclassed axes, and has a bunch of other useful features.

The next most important utility is the ``format`` method, available on every axes generated by ``subplots``. Use this method to fine-tune your axis properties, titles, labels, limits, and much more.

Here are some highlights of the remaining features:

*  Specify figure, axes, panel, etc. sizes with arbitrary physical units --
   not just inches or "relative" units.
*  A smarter "tight layout" feature. Figure width or height alternately
   scales so that subplot aspect ratios are fixed, inner space
   between subplots automatically scaled so subplot tick labels, etc. do
   not overlap with each other.
*  Axes panels and figure panels, for global colorbars, global legends,
   or tertiary data. Panel widths always held fixed during "tight layout"
   scaling.
*  Automatic axes, colorbar, and legend formatting when
   ``xarray.DataArray``, ``pandas.DataFrame``, or ``pandas.Series`` objects are passed
   to a plotting command, just like their respective ``plot`` methods.
*  Easy setting customization with a user ``.proplotrc`` file. Option
   to save custom colormaps, and they will be loaded every time on startup.
*  Perceptually distinct named colors with easy-to-remember names,
   a ton of beautiful new colormaps, new property cycle colors.
*  Tools for merging existing colormaps and making new "perceptually
   uniform" colormaps on-the-fly. Tools for slicing and modifying existing
   colormaps.
*  Making colorbars from lists of lines
   or colors. Making axes "inset" colorbars. Making legends with centered
   rows instead of aligned columns.
*  Integration with basemap and cartopy. Generate arbitrary
   grids of arbitrary map projections in one go. Switch between the cartopy and
   basemap backends painlessly. Use the axes methods directly for basemap
   plotting, instead of the ``Basemap`` object.
*  Add geographic features with the ``format`` command.
   Customize geographic gridlines and gridline labels.

Why not add to matplotlib directly?
-----------------------------------
.. This project introduces new frameworks for
.. working with figures, namely *static* figure scaffoldings, the
.. wonky (but very useful) ``axes_list`` class,
.. harmonized usage of physical units across the entire project
This project can be thought of as "matplotlib for power users."
Many of its features represent an alternative to the existing matplotlib API -- and
following `TOOWTDI <https://wiki.python.org/moin/TOOWTDI>`__ philosophy,
they should perhaps remain here as a side project. For example: the ``format`` and ``smart_update`` methods, which are meant to replace existing axes and axis methods.

.. Some features could be relatively esoteric for the average user (for example,
   "perceptually uniform" colormaps), or
   could be seen as "convenience features" that perhaps do not belong
   with the core API for the sake of minimalism (for example, direct integration
   with cartographic toolkits).

There are also some philosophical differences and more direct conflicts.
ProPlot enforces **static** figure scaffoldings, while matplotlib encourages
successively adding axes to an existing figure instance.
The "smart tight layout" feature conflicts directly with
matplotlib's `tight layout <https://matplotlib.org/tutorials/intermediate/tight_layout_guide.html>`__, with more options and the ability
to preserve axes aspect ratios by sacrificing fixed figure dimensions.
And much of ``subplots`` could be seen as a more flexible alternative to
the `axes_grid1 <https://matplotlib.org/mpl_toolkits/axes_grid1/index.html>`__ toolkit.

Despite all this, if there are any matplotlib developers out there that think
some ProPlot features could be added to matplotlib directly, please contact me!

What about seaborn?
-------------------

There is already a great matplotlib wrapper called
`seaborn <https://seaborn.pydata.org/>`__. What makes this project
different?

While parts of ProPlot were inspired by seaborn, the goals
are largely different. Seaborn introduces new functions for
generating useful visualizations quickly, and works best when used with ``pandas.DataFrame``
objects. ProPlot incorporates similar automation when plotting
``pandas.DataFrame`` or ``xarray.DataArray`` objects, but critically, it
focuses on allowing the user to build highly customized plots and complex grids
of subplots when necessary, and allows users to work painlessly with geographic data.
Seaborn's features are accessible only from commands
on the module itself, while ProPlot's features are built right into the matplotlib API, thanks
to special subclasses of the native matplotlib ``Figure`` and ``Axes``
classes. Notably, rather than using "palettes", ProPlot uses the native matplotlib ``LinearSegmentedColormap`` and ``ListedColormap`` for color control. This gives user a gentle learning curve, but also permits a number of powerful features well beyond the scope of seaborn.

In summary, this project is intended as a companion or alternative to Seaborn, designed from the ground up to seamlessly wrap the matplotlib API rather than relying on a set of external functions.

Contributions
-------------
This entire package has so far been written by just `me <https://github.com/lukelbd>`__ -- but I have a day job as a graduate student. If you have any ideas for new features or come across any bugs, I'd love to receive a pull request!

Shout out to `bradyrx <https://github.com/bradyrx>`__ for being the
guinea pig and helping me fix a lot of the initial bugs. If your field is
atmospheric science, check out his awesome
`decadal climate prediction package <https://github.com/bradyrx/climpred>`_.

Donations
---------

At well over 10,000 lines of code, this package took a huge amount of time to write and document. If ProPlot has been useful for you, consider sending me a small donation.

.. image:: https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif
   :target: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5SP6S8RZCYMQA&source=url
